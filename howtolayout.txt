
desired = [root,
		[
		[year1,
			[	
				[sem1,
					[com1, com2, com3]],
				[sem2, 
					[com5, com6]]
			]
		],\Y1
		[year2,
			[
				[sem1,
					[com20, com50]]
			]] \Y2 CHILD
		]] \root CHILD
	]

<Root>
	<Year1>
		<Sem1>
			COM1, COM2, COM3
		</Sem1>
		<Sem2>
			COM5,COM7
		</Sem2>
	</Year1>
	<Year2>
		<Sem1>
			COM20, COM50
		</Sem1>
	</Year2>	
</Root>

<X>{children}</X> -> [X, [children]]
		

	[node, [children]
	children = [node, [[node, [[node, [children] ]] ]] ]
	
function getTree(node)
	return [node, children.map(child => getTree(child))]

	[node, [node, [node, [node, getTree()]]]]

getChildren(root, []) -> children = [
	getChildren(year1, []) 
		getChildren(sem1, [])
			getChildren(com1, []) -> return [



CODE TO ITERATE THROUGH ARRAYEDNODES

FOLDER = {"type": "folder"}
DECK = {"type": "deck"}

data = [
    [FOLDER, [DECK, ["someid", "okid"]]],
    [DECK, ["id1", "id"]]
]

def iterate_data(data):
    if True:
        print(f"item: {data}")
        node = data[0]
        sub_data = data[1]
        print(f"node: {node}")
        print(f"children: {sub_data}")
        if node["type"] != "deck":
            print("not deck")
            print("\n")
            iterate_data(sub_data)
        else:
            print(sub_data)
            print("\n")

# iterates through arrayednodes (data)
for node in data:
    iterate_data(node)